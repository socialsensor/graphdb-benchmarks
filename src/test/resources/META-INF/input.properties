# Choose which data sets you want to include in the benchmark by removing the contents.
#eu.socialsensor.dataset=data/Email-Enron.txt
#eu.socialsensor.dataset=data/com-youtube.ungraph.txt
#eu.socialsensor.dataset=data/Amazon0601.txt
#eu.socialsensor.dataset=data/com-lj.ungraph.txt
#can change the number in the filename of the synthetic datasets to 1000, 5000, 10000, 20000, 30000, 40000, 50000
eu.socialsensor.dataset=data/network5000.dat
eu.socialsensor.actual-communities=data/community5000.dat

eu.socialsensor.database-storage-directory=storage
# Sample meters this frequently (milliseconds)
eu.socialsensor.metrics.csv.interval=1000
# for the csv reporter
eu.socialsensor.metrics.csv.directory=metrics
# for the graphite reporter
#eu.socialsensor.metrics.graphite.hostname=192.168.59.103

# Choose which databases you want to in the benchmark by removing the comments.
# Available dbs are:
eu.socialsensor.databases=tbdb
#eu.socialsensor.databases=tddb
#eu.socialsensor.databases=tc
#eu.socialsensor.databases=thb
#eu.socialsensor.databases=tce
#eu.socialsensor.databases=ti
eu.socialsensor.databases=orient
#eu.socialsensor.databases=neo4j

# Database specific options
# Titan options
# page-size - Number of results to pull when iterating over a storage backend (default 100)
eu.socialsensor.titan.page-size=100
# to disable buffering on mutations, set to zero. Default 1024. This will set the queue size as well
eu.socialsensor.titan.buffer-size=10000
# id block size default 10000
eu.socialsensor.titan.ids.block-size=10000
# Titan DynamoDB options
# when warm-tables is set to true, the benchmark will create tables of the specified data model in parallel
eu.socialsensor.dynamodb.precreate-tables=true
# DynamoDBDelegate worker thread pool size. should not be larger than the number of HTTP connections
# assuming a round trip time of 10ms for writes, one thread can do 50tps. When using the MULTI data
# model, items are usually small, so the round trip time is close to that.
eu.socialsensor.dynamodb.workers=15
# TPS (both read and write to set per table). 750 R and W TPS = 1 DynamoDB table partition
# http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/GuidelinesForTables.html#GuidelinesForTables.Partitions
eu.socialsensor.dynamodb.tps=750
# Data model for the Titan DynamoDB plugin. Can be SINGLE or MULTI
eu.socialsensor.dynamodb.data-model=MULTI
# Whether to allow eventually consistent reads or not
# (allowing eventually consistent reads allows queries to happen faster)
eu.socialsensor.dynamodb.force-consistent-read=true
# Credentials. You can set credentials to any value when running against DynamoDBLocal
# Needs to be the fully qualified class name of a class implementing 
# com.amazonaws.auth.AWSCredentials or com.amazonaws.auth.AWSCredentialsProvider.
eu.socialsensor.dynamodb.credentials.class-name=com.amazonaws.auth.DefaultAWSCredentialsProviderChain
# Comma separated list of strings to pass to the constructor of the class specified above.
eu.socialsensor.dynamodb.credentials.constructor-args=
# Endpoint. the titan-dynamodb database option above requires you to specify an endpoint.
# This endpoint could be DynamoDBLocal running in a separate process (eg, http://127.0.0.1:4567),
# or the https endpoint of a production region of the DynamoDB service.
eu.socialsensor.dynamodb.endpoint=http://127.0.0.1:4567
#eu.socialsensor.dynamodb.endpoint=https://dynamodb.us-east-1.amazonaws.com

# The following five benchmarks are permutable (that is, the suite can run them
# many times in different database order). To turn on permutations, set
# eu.socialsensor.permute-benchmarks=true
eu.socialsensor.permute-benchmarks=false

# Choose which benchmark you want to run by removing the comments. Choose one Insertion
# workload and then query/clustering workloads afterward.
eu.socialsensor.benchmarks=MASSIVE_INSERTION
#eu.socialsensor.benchmarks=SINGLE_INSERTION
eu.socialsensor.benchmarks=FIND_NEIGHBOURS
eu.socialsensor.benchmarks=FIND_ADJACENT_NODES
#eu.socialsensor.benchmarks=FIND_SHORTEST_PATH
#eu.socialsensor.shortest-path-random-nodes=100

# The clustering benchmark is not permutable even if eu.socialsensor.permute-benchmarks=true
#eu.socialsensor.benchmarks=CLUSTERING
eu.socialsensor.randomize-clustering=false
eu.socialsensor.nodes-count=1000

# Choose the cache values you want run the CW benchmark, or have them generated. To choose:
eu.socialsensor.cache-values=25
eu.socialsensor.cache-values=50
eu.socialsensor.cache-values=75
eu.socialsensor.cache-values=100
eu.socialsensor.cache-values=125
eu.socialsensor.cache-values=150

# To have the cache values generated for the CW benchmark.
#eu.socialsensor.cache-increment-factor=1
#eu.socialsensor.cache-values-count=6

# This benchmark measures the time it takes to delete the database
#eu.socialsensor.benchmarks=DELETION

# Results folder path
eu.socialsensor.results-path=results
